#!/usr/bin/env python3

import argparse
import json
import sys
from pathlib import Path
from typing import cast

import humanfriendly
import mistletoe
from mistletoe.block_token import (
    BlockToken,
    Table,
    TableRow,
    re,
)
from mistletoe.span_token import RawText
from mistletoe.token import Token


def read(args):
    assignees = {}

    def read_text(token: Token) -> str:
        if isinstance(token, RawText):
            return re.sub(r"<!--.*?-->", "", cast(str, token.content)).strip()
            # return str(token.content).replace("<!--.*?-->", "").strip()

        assert token.children is not None
        return read_text(next(c for c in token.children))

    def read_tr(token: TableRow):
        assert token.children is not None
        td = list(map(read_text, token.children))
        if td[5] or td[6]:
            assignees[td[0]] = {"discord": td[5], "github": td[6]}

    def read_table(token: Table):
        assert token.children is not None
        for child in token.children:
            if isinstance(child, TableRow):
                read_tr(child)

    def read_block(token: BlockToken):
        assert token.children is not None
        for child in token.children:
            if isinstance(child, Table):
                read_table(child)
            elif isinstance(child, BlockToken):
                read_block(child)

        # for child in token.children:
        #     if isinstance(child, BlockToken):
        #         read_block(child)

    if args.wiki_path == "-":
        data = json.load(sys.stdin)
    else:
        path = Path(args.wiki_path)
        data = mistletoe.Document(path.open("r"))
        read_block(data)
        __import__("pprint").pprint(assignees)


def write(args):
    if args.report_path == "-":
        data = json.load(sys.stdin)
    else:
        path = Path(args.report_path)
        data = json.load(path.open("r"))
    print(
        """# Translation Units

Edit this page and fill in your own username to assign yourself to a file.

File|Matched|Total|%|:grey_question:|Assignee<br>Discord|Assignee<br>GitHub
-|-|-|-|-|-|-"""
    )
    for unit in data["units"] or []:

        def friendly_size(key: str) -> str:
            return (
                f"`{humanfriendly.format_size(unit[key] or 0).replace('bytes', 'B')}`"
            )

        # Strip "main/" by splitting on "/" and recombining
        file = "/".join((unit["name"] or "/").split("/")[1:])
        # Link to source file
        file = f"[`{file}`](../blob/master/src/{file}.c)"

        matched = f"{friendly_size('matched_code')}"
        total = f"{friendly_size('total_code')}"
        percent = f"`{humanfriendly.round_number(unit['fuzzy_match_percent'] or 0)}%`"
        linked = ":heavy_check_mark:" if unit["complete"] else ":x:"
        print(
            f"{file}|{matched}|{total}|{percent}|{linked}"
            "|<!-- Discord -->|<!-- GitHub -->"
        )


def main():
    parser = argparse.ArgumentParser(
        description="Generates and parses the wiki's list of translation units."
    )
    subparsers = parser.add_subparsers(dest="subcommand")

    parser_write = subparsers.add_parser("write", help="Write JSON data to a file.")
    parser_write.add_argument(
        "report_path",
        metavar="REPORT",
        nargs="?",
        const="-",
        default=None,
        type=str,
        help="Path to the JSON report generated by objdiff-cli.",
    )
    parser_write.set_defaults(func=write)

    parser_read = subparsers.add_parser("read", help="test reading markdown")
    parser_read.add_argument(
        "wiki_path",
        metavar="WIKI",
        nargs="?",
        const="-",
        default=None,
        type=str,
        help="Path to the wiki markdown.",
    )
    parser_read.set_defaults(func=read)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
